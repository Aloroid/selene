name: Build selene
on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master
jobs:
  build_windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
    - name: Build (All features)
      run: |
        cd selene
        cargo build --locked --release --all-features
    - name: Upload selene
      uses: actions/upload-artifact@v1
      with:
        name: selene-windows
        path: ./target/release/selene.exe
    - name: Build (Lightweight)
      run: |
        cd selene
        cargo build --locked --release --verbose --no-default-features
    - name: Upload selene-light
      uses: actions/upload-artifact@v1
      with:
        name: selene-light-windows
        path: ./target/release/selene.exe
  build_mac:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v1
    - name: Install Rust
      run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
    - name: Build (All features)
      run: |
        source $HOME/.cargo/env
        cd selene
        cargo build --locked --release --all-features
    - name: Upload selene
      uses: actions/upload-artifact@v1
      with:
        name: selene-macos
        path: ./target/release/selene
    - name: Build (Lightweight)
      run: |
        source $HOME/.cargo/env
        cd selene
        cargo build --locked --release --verbose --no-default-features
    - name: Upload selene-light
      uses: actions/upload-artifact@v1
      with:
        name: selene-light-macos
        path: ./target/release/selene
  build_linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Build (All features)
      run: |
        cd selene
        cargo build --locked --release --all-features
    - name: Upload selene
      uses: actions/upload-artifact@v1
      with:
        name: selene-linux
        path: ./target/release/selene
    - name: Build (Lightweight)
      run: |
        cd selene
        cargo build --locked --release --verbose --no-default-features
    - name: Upload selene-light
      uses: actions/upload-artifact@v1
      with:
        name: selene-light-linux
        path: ./target/release/selene
  release:
    runs-on: ubuntu-latest
    # needs: ['build_windows', 'build_mac', 'build_linux']
    steps:
    - uses: actions/checkout@v1
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        path: artifacts
    - run: |
        VERSION=`grep -Po '(?<=^version = ")([^"]+)' ./selene/Cargo.toml`
        echo "VERSION=$VERSION" >> $VERSION

        cd artifacts
        echo "foo" > ./artifacts/test.txt
        cd ..
    - name: Get changelog
      run: |
        CHANGELOG_ENTRY=`grep --color=never -m 1 -Po '## \K(\[[0-9\.]+\].+)' CHANGELOG.md`
        DESCRIPTION=`./misc/extract-changelog.sh $CHANGELOG_ENTRY`

        echo "CHANGELOG_DESCRIPTION=$DESCRIPTION" >> $GITHUB_ENV
        echo "CHANGELOG_ENTRY=$CHANGELOG_ENTRY" >> $GITHUB_ENV
    - name: Create release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ env.CHANGELOG_ENTRY }}
        body: ${{ env.CHANGELOG_DESCRIPTION }}
    - name: Upload test build
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/foo.txt
        asset_name: foo-${{ env.VERSION }}.txt
        asset_content_type: text/plain
